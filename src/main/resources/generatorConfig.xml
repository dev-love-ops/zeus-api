<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!--官方配置参考地址: http://www.mybatis.org/generator/configreference/context.html-->

<!--MBG配置根标签-->
<generatorConfiguration>

    <!--加载配置文件，为下面读取数据库信息准备, 加载配置文件后, 下面就可以使用${property}这种形式的引用-->
    <properties resource="application.properties"/>


    <!--指定环境, 或者可以理解为指定任务, 如果我的项目中要连接多个数据库, 可以设置多个context, 一般一个数据库设置一个context, 这样每次执行generate的时候每个content都会执行-->
    <!--defaultModelType: flat  这里表示对于每一个表, 只生成一个对应的Class, 其它选项可能会根据主键等生成多个class, 然后关联起来-->
    <context id="user-context-id" targetRuntime="MyBatis3" defaultModelType="flat">

        <plugin type="com.github.hellorocky.LombokPlugin"></plugin>

        <!-- 控制生成代码的注释 -->
        <commentGenerator type="com.github.hellorocky.DatabaseCommentGenerator">
            <!-- 是否去除自动生成的注释 true：是 ： false:否-->
            <property name="suppressAllComments" value="false"/>
            <!--不生成时间戳信息, 因为每次如果生成时间戳的时候, 提交git会有大量的差异-->
            <property name="suppressDate" value="true"/>
            <!--是否从数据库中读取备注信息写入新生成对象的备注中-->
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>

        <!--数据库链接地址账号密码, 这里引用的上面的指定的配置文件中的配置项-->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}"
                        connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}"
                        password="${spring.datasource.password}">
            <!--跳过数据库系统的同名表, 比如我们自己定义了一个user表, 这时候可能会去翻译2个表, mysql.user和自己定义的-->
            <property name="nullCatalogMeansCurrent" value="true"/>
            <property name="useInformationSchema" value="true"/>
        </jdbcConnection>

        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL和NUMERIC类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成domain类的位置-->
        <javaModelGenerator targetPackage="com.devloveops.zeus.domain.system" targetProject="src/main/java">
            <!-- 从数据库返回的值被清理前后的空格, 如果为true, 会在setter中加入trim -->
            <property name="trimStrings" value="false"/>
        </javaModelGenerator>

        <!-- 生成mapper XML文件的位置 -->
        <sqlMapGenerator targetPackage="mapper.system" targetProject="src/main/resources">
        </sqlMapGenerator>

        <!-- mapper接口生成的位置 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.devloveops.zeus.mapper.system" targetProject="src/main/java">
        </javaClientGenerator>

        <!-- 指定数据库的表, 可以设置多个, 每个表一个 -->
        <table tableName="system_user">
            <!--使用原始列名称生成POJO还是转化成驼峰命名方式-->
            <property name="useActualColumnNames" value="false"></property>
            <!--如果要自定义表中某列映射的名称, 可以使用columnOverride-->
            <!--<columnOverride column="user_id" property="user_id"></columnOverride>-->
            <!--如果不想让表中某个字段生成POJO, 可以使用ignoreColumn-->
            <!--<ignoreColumn column="xxx"></ignoreColumn>-->
        </table>
    </context>
</generatorConfiguration>